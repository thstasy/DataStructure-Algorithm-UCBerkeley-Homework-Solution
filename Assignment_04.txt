1.
/* Write a function to reverse the elements in a doubly linked list. Do not simply print it out. It must have the references correctly set in reversed order.
Also, write a print method – this should help with debugging.*/


class ListNode {
    int val;
    ListNode prev;
    ListNode next;

    public ListNode(int val) {
        this.val = val;
    }
}

public class DoublyLinkedList {
    private ListNode head;
    private ListNode tail;

    public DoublyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    public void insertAtTail(int val) {
        ListNode newNode = new ListNode(val);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }

    public void reverse() {
        ListNode current = head;
        ListNode temp = null;

        while (current != null) {
            temp = current.prev;
            current.prev = current.next;
            current.next = temp;
            current = current.prev;
        }

        if (temp != null) {
            head = temp.prev;
        }
    }

    public void printList() {
        ListNode current = head;
        System.out.print("Doubly Linked List: ");
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        DoublyLinkedList dll = new DoublyLinkedList();
        dll.insertAtTail(1);
        dll.insertAtTail(2);
        dll.insertAtTail(3);
        dll.insertAtTail(4);
        dll.insertAtTail(5);

        System.out.println("Original Doubly Linked List:");
        dll.printList();

        dll.reverse();

        System.out.println("Reversed Doubly Linked List:");
        dll.printList();
    }
}


/*Explanation:

The ListNode class represents each node in the doubly linked list, containing references to the previous and next nodes.
The DoublyLinkedList class maintains references to the head and tail nodes of the doubly linked list.
The insertAtTail method inserts a new node at the end of the doubly linked list.
The reverse method reverses the elements in the doubly linked list by adjusting the previous and next references of each node accordingly.
The printList method prints the elements of the doubly linked list for debugging purposes.
In the main method, we create a doubly linked list, insert elements, print the original list, reverse it, and then print the reversed list.
*/



2. /* Write a function to reverse the elements in a doubly linked list. Do not simply print it out. It must have the references correctly set in reversed order.
Also, write a print method – this should help with debugging.*/


import java.util.HashSet;

class ListNode {
    int val;
    ListNode next;

    public ListNode(int val) {
        this.val = val;
    }
}

public class LinkedListUnion {
    public ListNode union(ListNode l1, ListNode l2) {
        // Create a HashSet to store unique elements
        HashSet<Integer> set = new HashSet<>();

        // Traverse the first linked list and add elements to the set
        ListNode current = l1;
        while (current != null) {
            set.add(current.val);
            current = current.next;
        }

        // Traverse the second linked list and add elements to the set
        current = l2;
        while (current != null) {
            set.add(current.val);
            current = current.next;
        }

        // Create a dummy node to hold the result
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        // Add elements from the set to the result linked list
        for (int num : set) {
            tail.next = new ListNode(num);
            tail = tail.next;
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        LinkedListUnion solution = new LinkedListUnion();

        // Create linked lists
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(10);
        l1.next.next = new ListNode(5);
        l1.next.next.next = new ListNode(3);
        l1.next.next.next.next = new ListNode(4);

        ListNode l2 = new ListNode(4);
        l2.next = new ListNode(7);
        l2.next.next = new ListNode(8);
        l2.next.next.next = new ListNode(3);
        l2.next.next.next.next = new ListNode(11);

        // Calculate the union of the linked lists
        ListNode unionList = solution.union(l1, l2);

        // Print the union of the linked lists
        System.out.println("Union of the linked lists:");
        printList(unionList);
    }
}

/* Explanation:

We use a HashSet to store unique elements from both linked lists.
We traverse both linked lists and add their elements to the HashSet.
We then create a new linked list using the elements from the HashSet.
The HashSet ensures that only unique elements are added to the new linked list.
Finally, we return the head of the new linked list, which represents the union of the input linked lists. */



3. /* Write the following binary search tree functions to:
Return the minimum value
Return the maximum value
Return the sum of all values */


class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }
}

public class BinarySearchTree {
    private TreeNode root;

    public BinarySearchTree() {
        root = null;
    }

    // Insert a value into the binary search tree
    public void insert(int val) {
        root = insertRec(root, val);
    }

    // Helper function to insert a value recursively
    private TreeNode insertRec(TreeNode root, int val) {
        if (root == null) {
            root = new TreeNode(val);
            return root;
        }

        if (val < root.val) {
            root.left = insertRec(root.left, val);
        } else if (val > root.val) {
            root.right = insertRec(root.right, val);
        }

        return root;
    }

    // Return the minimum value in the binary search tree
    public int findMin() {
        TreeNode current = root;
        while (current.left != null) {
            current = current.left;
        }
        return current.val;
    }

    // Return the maximum value in the binary search tree
    public int findMax() {
        TreeNode current = root;
        while (current.right != null) {
            current = current.right;
        }
        return current.val;
    }

    // Return the sum of all values in the binary search tree
    public int findSum() {
        return findSumRec(root);
    }

    // Helper function to calculate the sum recursively
    private int findSumRec(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return root.val + findSumRec(root.left) + findSumRec(root.right);
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();
        tree.insert(10);
        tree.insert(5);
        tree.insert(15);
        tree.insert(3);
        tree.insert(7);
        tree.insert(12);
        tree.insert(20);

        System.out.println("Minimum value: " + tree.findMin());
        System.out.println("Maximum value: " + tree.findMax());
        System.out.println("Sum of all values: " + tree.findSum());
    }
}


/* Explanation:

We define a TreeNode class to represent each node in the binary search tree.
The BinarySearchTree class contains methods for inserting values into the binary search tree and performing operations such as finding the minimum value, maximum value, and sum of all values.
The insert method inserts a value into the binary search tree recursively.
The findMin method finds the minimum value in the binary search tree by traversing left nodes until reaching the leftmost node.
The findMax method finds the maximum value in the binary search tree by traversing right nodes until reaching the rightmost node.
The findSum method calculates the sum of all values in the binary search tree recursively by traversing all nodes.
In the main method, we create a binary search tree, insert values into it, and then print the minimum value, maximum value, and sum of all values in the tree. */


4. /* Write a function that accepts a binary tree and verifies whether it fulfills binary search tree conditions. */


class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }
}

public class BinaryTreeValidator {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, null, null);
    }

    private boolean isValidBST(TreeNode node, Integer min, Integer max) {
        if (node == null) {
            return true;
        }

        // Check if the current node's value is within the valid range
        if ((min != null && node.val <= min) || (max != null && node.val >= max)) {
            return false;
        }

        // Check the left subtree with updated max value
        // Check the right subtree with updated min value
        return isValidBST(node.left, min, node.val) && isValidBST(node.right, node.val, max);
    }

    public static void main(String[] args) {
        // Example usage
        BinaryTreeValidator validator = new BinaryTreeValidator();

        // Construct a sample binary tree
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(3);
        root.right = new TreeNode(8);
        root.left.left = new TreeNode(2);
        root.left.right = new TreeNode(4);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(9);

        // Check if the binary tree is a valid binary search tree
        boolean isValid = validator.isValidBST(root);
        System.out.println("Is the binary tree a valid binary search tree? " + isValid);
    }
}
  

/*Explanation:

The TreeNode class represents each node in the binary tree.
The BinaryTreeValidator class contains the isValidBST method which checks whether the given binary tree is a valid binary search tree.
The isValidBST method is a recursive function that traverses the binary tree, passing down the range of valid values (min and max) for each node.
At each node, it checks if the current node's value is within the valid range.
If the current node's value violates the BST property, or if any subtree violates the BST property, the function returns false.
If all nodes satisfy the BST property, the function returns true.
In the main method, we create a sample binary tree and then call the isValidBST method to check whether it is a valid binary search tree. */