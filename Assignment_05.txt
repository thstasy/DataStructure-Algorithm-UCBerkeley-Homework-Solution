Task 1.
/* Write a function to get the last item in a complete tree. This is easy to do if the complete tree were implemented using arrays. How would we do this if the tree was implemented using nodes? */


import java.util.LinkedList;
import java.util.Queue;

class TreeNode {
    int val;
    TreeNode left, right;

    public TreeNode(int val) {
        this.val = val;
        left = right = null;
    }
}

class BinaryTree {
    TreeNode root;

    // Function to get the last item in a complete tree
    public int getLastItem() {
        if (root == null)
            throw new IllegalStateException("Tree is empty");

        Queue<TreeNode> queue = new LinkedList<>();
        TreeNode lastNode = null; // Initialize the last node

        // Perform level-order traversal
        queue.offer(root);
        while (!queue.isEmpty()) {
            lastNode = queue.poll(); // Update last node with current node

            if (lastNode.left != null)
                queue.offer(lastNode.left);
            if (lastNode.right != null)
                queue.offer(lastNode.right);
        }

        return lastNode.val; // Return the value of the last node
    }
}

public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new TreeNode(1);
        tree.root.left = new TreeNode(2);
        tree.root.right = new TreeNode(3);
        tree.root.left.left = new TreeNode(4);
        tree.root.left.right = new TreeNode(5);
        tree.root.right.left = new TreeNode(6);
        tree.root.right.right = new TreeNode(7);

        int lastItem = tree.getLastItem();
        System.out.println("Last item in the complete tree: " + lastItem);
    }
}

/* In this code:
We perform a level-order traversal using a queue.
At each level, we update the lastNode variable with the node being processed.
After traversing the entire tree, lastNode will contain the last node visited.
We return the value of the last node as the last item in the complete tree.
*/



Task 2.
/* Write a heap sort function. We've looked at max heap, which will sort our array in reversed order. Therefore, you will need to implement heap sort as a min heap to sort an array in ascending order. */


public class HeapSort {
    public void heapSort(int[] arr) {
        int n = arr.length;

        // Build min heap
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }

        // Extract elements from the heap one by one
        for (int i = n - 1; i > 0; i--) {
            // Move the current root to the end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Call heapify on the reduced heap
            heapify(arr, i, 0);
        }
    }

    // Heapify a subtree rooted with node i which is an index in arr[]
    void heapify(int[] arr, int n, int i) {
        int smallest = i; // Initialize smallest as root
        int left = 2 * i + 1; // left = 2*i + 1
        int right = 2 * i + 2; // right = 2*i + 2

        // If left child is smaller than root
        if (left < n && arr[left] < arr[smallest]) {
            smallest = left;
        }

        // If right child is smaller than smallest so far
        if (right < n && arr[right] < arr[smallest]) {
            smallest = right;
        }

        // If smallest is not root
        if (smallest != i) {
            int temp = arr[i];
            arr[i] = arr[smallest];
            arr[smallest] = temp;

            // Recursively heapify the affected sub-tree
            heapify(arr, n, smallest);
        }
    }

    // Utility function to print array of size n
    static void printArray(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Driver program
    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6, 7};
        int n = arr.length;

        HeapSort ob = new HeapSort();
        ob.heapSort(arr);

        System.out.println("Sorted array is");
        printArray(arr);
    }
}

/* Explanation:

heapSort function builds a min heap and then repeatedly extracts the minimum element from the heap to get the sorted array.
heapify function maintains the heap property in a subtree rooted at index i.
The printArray function is used to print the elements of the array.
In the main method, we initialize an array and call the heapSort method to sort it in ascending order. Finally, we print the sorted array. */



Task 3. 
/* Write a function that given an array of words, returns the longest prefix. Write it so that it performs efficiently.
For example, given the array

words = ["apple", "appetite", "apparatus", "appliance"]
The function should return "app".
*/


public class LongestCommonPrefix {
    public String longestCommonPrefix(String[] words) {
        if (words == null || words.length == 0) {
            return "";
        }

        // Start with the first word as the prefix
        String prefix = words[0];

        for (int i = 1; i < words.length; i++) {
            String currentWord = words[i];
            int j = 0;
            // Compare characters of current word with the prefix
            while (j < prefix.length() && j < currentWord.length() && prefix.charAt(j) == currentWord.charAt(j)) {
                j++;
            }
            // Update the prefix to the common substring
            prefix = prefix.substring(0, j);

            // If no common prefix is found, return an empty string
            if (prefix.equals("")) {
                return "";
            }
        }
        return prefix;
    }

    public static void main(String[] args) {
        LongestCommonPrefix lcp = new LongestCommonPrefix();
        String[] words = {"apple", "appetite", "apparatus", "appliance"};
        String longestPrefix = lcp.longestCommonPrefix(words);
        System.out.println("Longest common prefix: " + longestPrefix); // Output: "app"
    }
}


/* Explanation:

The longestCommonPrefix function takes an array of words as input and returns the longest common prefix among them.
It starts by assuming that the prefix is the first word in the array.
It iterates through each word in the array and compares its characters with the current prefix.
If it finds a character that doesn't match or reaches the end of any word, it updates the prefix to the common substring found so far.
If no common prefix is found, it returns an empty string.
Finally, it returns the longest common prefix found among the words.
*/


Task 4. 
/* Write a function that accepts an array of words and then returns the shortest unique prefix of each word. 
For example:

words = ['apple', 'banana', 'cherry', 'cranberry', 'grape', 'grapefruit'] 

# 'apple' returns 'a'
# 'banana' returns 'b'
# 'cherry' returns 'ch'
# 'cranberry' returns 'cr'
# 'grape' returns 'grape'
# 'grapefruit' returns 'grapef'
# returns:
# ['a', 'b', 'ch', 'cr', 'grape', 'grapef']
*/

import java.util.*;

class TrieNode {
    Map<Character, TrieNode> children;
    int count;

    public TrieNode() {
        children = new HashMap<>();
        count = 0;
    }
}

public class ShortestUniquePrefix {
    TrieNode root;

    public ShortestUniquePrefix() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode current = root;
        for (char ch : word.toCharArray()) {
            current.children.putIfAbsent(ch, new TrieNode());
            current = current.children.get(ch);
            current.count++;
        }
    }

    public String findShortestUniquePrefix(String word) {
        StringBuilder prefix = new StringBuilder();
        TrieNode current = root;
        for (char ch : word.toCharArray()) {
            prefix.append(ch);
            current = current.children.get(ch);
            if (current.count == 1) {
                break;
            }
        }
        return prefix.toString();
    }

    public List<String> shortestUniquePrefixes(String[] words) {
        List<String> result = new ArrayList<>();
        for (String word : words) {
            insert(word);
        }
        for (String word : words) {
            result.add(findShortestUniquePrefix(word));
        }
        return result;
    }

    public static void main(String[] args) {
        ShortestUniquePrefix prefixFinder = new ShortestUniquePrefix();
        String[] words = {"apple", "banana", "cherry", "cranberry", "grape", "grapefruit"};
        List<String> prefixes = prefixFinder.shortestUniquePrefixes(words);
        System.out.println(prefixes);
    }
}


/*Explanation:

We define a TrieNode class to represent each node in the Trie.
The ShortestUniquePrefix class contains methods to insert words into the Trie, find the shortest unique prefix of a word, and find the shortest unique prefix for each word in the array.
The insert method inserts a word into the Trie.
The findShortestUniquePrefix method finds the shortest unique prefix for a given word by traversing the Trie.
The shortestUniquePrefixes method constructs the Trie with the given words and then finds the shortest unique prefix for each word.
In the main method, we create an instance of ShortestUniquePrefix, pass the array of words, and print the list of shortest unique prefixes.*/

