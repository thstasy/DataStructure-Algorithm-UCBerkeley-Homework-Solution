TASK 1.
1-1. Bubble Sort:
   - Worst Case: O(n^2) comparisons and swaps when the input array is in reverse sorted order.
   - Best Case: O(n) time complexity when the input array is already sorted.

1-2. Selection Sort:
   - Worst Case: O(n^2) comparisons and swaps when the smallest element needs to be found in each iteration.
   - Best Case: O(n^2) time complexity, as the algorithm does not differentiate between sorted and unsorted portions of the array.

1-3. Insertion Sort:
   - Worst Case: O(n^2) comparisons and swaps when the input array is in reverse sorted order.
   - Best Case: O(n) time complexity when the input array is already sorted.

1-4. Merge Sort:
   - Worst Case: O(n log n) operations due to its divide-and-conquer approach, regardless of the input data.
   - Best Case: O(n log n) time complexity, as Merge Sort consistently divides the array into smaller subarrays until they are sorted individually.

1-5. Quicksort:
   - Worst Case: O(n^2) time complexity when the pivot selection consistently partitions the array into unbalanced partitions.
   - Best Case: O(n log n) time complexity when the pivot selection consistently divides the array into balanced partitions.


TASK 2. Implement the insertion sort function.

    public class InsertionSort {
        public static void insertionSort(int[] arr) {
            int n = arr.length;
            for (int i = 1; i < n; i++) {
                int key = arr[i];
                int j = i - 1;
    
                // Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position
                while (j >= 0 && arr[j] > key) {
                    arr[j + 1] = arr[j];
                    j = j - 1;
                }
                arr[j + 1] = key;
            }
        }
    
        public static void main(String[] args) {
            int[] arr = {12, 11, 13, 5, 6};
    
            System.out.println("Array before sorting:");
            printArray(arr);
    
            insertionSort(arr);
    
            System.out.println("Array after sorting:");
            printArray(arr);
        }
    
        public static void printArray(int[] arr) {
            for (int i = 0; i < arr.length; i++) {
                System.out.print(arr[i] + " ");
            }
            System.out.println();
        }
    }


TASK 3. 
Write a function that accepts an array of size n containing random numbers ranging from 0 to n-1.This array may contain duplicates.
The numbers are not arranged in any particular order. This function should return a new array that consists of any missing numbers within the range from 0 to n-1. This function must have a time complexity of O(n) to get full credit.


    import java.util.ArrayList;
    import java.util.List;
    
    public class MissingNumbers {
    
        public static List<Integer> findMissingNumbers(int[] nums) {
            List<Integer> missingNumbers = new ArrayList<>();
    
            // Create an array to mark whether a number is present
            boolean[] present = new boolean[nums.length];
    
            // Mark the numbers that are present in the input array
            for (int num : nums) {
                if (num >= 0 && num < nums.length) {
                    present[num] = true;
                }
            }
    
            // Add the missing numbers to the result
            for (int i = 0; i < present.length; i++) {
                if (!present[i]) {
                    missingNumbers.add(i);
                }
            }
    
            return missingNumbers;
        }
    
        public static void main(String[] args) {
            int[] arr = {0, 3, 6, 7, 3, 3, 0, 4};
            List<Integer> missing = findMissingNumbers(arr);
            System.out.println("Missing numbers: " + missing);
        }
    }

    /*
    Explanation:
    
    The function findMissingNumbers takes an array of integers as input and returns a list of missing numbers.
    It initializes a boolean array present to mark whether each number from 0 to n-1 is present in the input array.
    It iterates through the input array to mark the numbers that are present.
    Finally, it iterates through the present array to identify the missing numbers and adds them to the result list.
    The time complexity of this function is O(n) because it iterates through the input array and the present array once.
    */


TASK 4. Write a function that returns the first non-repeating character in a string with O(n) efficiency. It should return none or null if there are no non-repeating conesutive characters.
For example:
string "aaaaabbbbbbc", this function should return "c"
string "aabab" should return "b"  
string "aababb" should return  None ("b" is repeating)



    import java.util.HashMap;
    import java.util.Map;
    
    public class FirstNonRepeatingChar {
    
        public static Character firstNonRepeatingChar(String s) {
            if (s == null || s.isEmpty()) {
                return null;
            }
    
            Map<Character, Integer> count = new HashMap<>();
            Map<Character, Integer> firstOccurrence = new HashMap<>();
    
            // Count occurrences and store first occurrence index
            for (int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                count.put(c, count.getOrDefault(c, 0) + 1);
                firstOccurrence.putIfAbsent(c, i);
            }
    
            // Find the first non-repeating character
            Character result = null;
            for (char c : s.toCharArray()) {
                if (count.get(c) == 1 && (result == null || firstOccurrence.get(c) < firstOccurrence.get(result))) {
                    result = c;
                }
            }
    
            return result;
        }
    
        public static void main(String[] args) {
            System.out.println(firstNonRepeatingChar("aaaaabbbbbbc"));  // Output: c
            System.out.println(firstNonRepeatingChar("aabab"));         // Output: b
            System.out.println(firstNonRepeatingChar("aababb"));        // Output: null
        }
    }

    /*
    Explanation:
    
    The function firstNonRepeatingChar takes a string s as input and returns a Character.
    It uses two HashMaps to count occurrences and store the first occurrence index of each character.
    It iterates through the string to populate the count and first occurrence maps.
    Then, it iterates through the characters again to find the first non-repeating character with the lowest first occurrence index.
    The function returns the first non-repeating character found, or null if none exists.
    */




TASK 5. 
Write a function that given an array of integers and a target value, returns the length of the longest subarray with a sum equal to the target value.For example: Given an array [3, 1, -1, 2, -1, 5, -2, 3] and a target value of 3, the longest subarray length is 5 ([-1, 2, -1, 5, -2])



    import java.util.HashMap;
    import java.util.Map;
    
    public class LongestSubarraySum {
        public static int longestSubarraySum(int[] nums, int target) {
            Map<Integer, Integer> map = new HashMap<>();
            int maxLength = 0;
            int sum = 0;
    
            for (int i = 0; i < nums.length; i++) {
                sum += nums[i];
    
                // If the sum equals the target, update maxLength
                if (sum == target) {
                    maxLength = i + 1;
                }
    
                // If the difference between the current sum and target sum is seen before,
                // it means the sum of elements between those indices is equal to the target
                if (map.containsKey(sum - target)) {
                    maxLength = Math.max(maxLength, i - map.get(sum - target));
                }
    
                // If the sum is not present in the map, add it with its index
                if (!map.containsKey(sum)) {
                    map.put(sum, i);
                }
            }
    
            return maxLength;
        }
    
        public static void main(String[] args) {
            int[] nums = {3, 1, -1, 2, -1, 5, -2, 3};
            int target = 3;
            System.out.println("Length of the longest subarray with sum equal to " + target + ": " + longestSubarraySum(nums, target));
        }
    }

    /*
    Explanation:
    
    The function longestSubarraySum takes an array of integers nums and a target value target.
    It uses a HashMap to store the cumulative sum of elements encountered so far as keys and their corresponding indices as values.
    It iterates through the array and calculates the cumulative sum.
    If the difference between the current sum and the target sum is found in the map, it means there is a subarray with a sum equal to the      target. It updates the maxLength accordingly.
    The function returns the maxLength which represents the length of the longest subarray with a sum equal to the target value.
    */
